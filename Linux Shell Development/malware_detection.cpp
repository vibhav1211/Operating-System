#include "./malware_detection.hpp"
#include <fstream>
#include <dirent.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int pgetppid(int pid)
{
    ifstream myfile;
    string location = "/proc/" + to_string(pid) + "/stat";
    myfile.open(location);
    if (!myfile.good())
        return 0;
    string num;
    vector<string> nums;
    while (myfile >> num)
    {
        nums.push_back(num);
    }
    myfile.close();
    return stoi(nums[3]);
}

double get_process_time(int pid)
{
    ifstream myfile;
    string location = "/proc/" + to_string(pid) + "/stat";
    myfile.open(location);
    if (!myfile.good())
        return 0;
    string num;
    vector<string> nums;
    while (myfile >> num)
    {
        nums.push_back(num);
    }
    myfile.close();
    location = "/proc/uptime";
    myfile.open(location);
    if (!myfile.good())
        return 0;
    vector<string> times;
    while (myfile >> num)
    {
        times.push_back(num);
    }
    myfile.close();

    return (stoi(nums[13]) / 100.0 + stoi(nums[14]) / 100.0) * 100 / (stoi(times[0]) - stoi(nums[21]) / 100.0);
}

void print_parents(int pid)
{
    int ppid = 1;
    while (ppid || pid != ppid)
    {
        ppid = pgetppid(pid);
        printf("PPid = %d\n", ppid);
        pid = ppid;
    }
}
vector<int> get_parents(int pid)
{
    int ppid = 1;
    vector<int> temp;
    temp.push_back(pid);
    while (ppid || pid != ppid)
    {
        ppid = pgetppid(pid);
        temp.push_back(ppid);
        pid = ppid;
    }
    return temp;
}

int get_total_child(int pid, map<int, process> &malware_detection)
{
    if (malware_detection[pid].children_count == 0)
    {
        return 1;
    }
    if (malware_detection[pid].total_children != -1)
    {
        return malware_detection[pid].total_children;
    }
    int ans = 0;
    for (int i = 0; i < malware_detection[pid].children.size(); i++)
    {
        ans += get_total_child(malware_detection[pid].children[i], malware_detection);
    }
    malware_detection[pid].total_children = ans + 1;
    return ans + 1;
}

double get_total_process_time(int pid, map<int, process> &malware_detection)
{
    if (malware_detection[pid].children_count == 0)
    {
        return malware_detection[pid].process_time;
    }
    if (malware_detection[pid].process_time_children != -1)
    {
        return malware_detection[pid].process_time_children;
    }
    double ans = 0;
    for (int i = 0; i < malware_detection[pid].children.size(); i++)
    {
        ans += get_total_process_time(malware_detection[pid].children[i], malware_detection);
    }
    malware_detection[pid].process_time_children = ans + malware_detection[pid].process_time;
    return ans + malware_detection[pid].process_time;
}

map<int, process> create_process_info()
{
    map<int, process> malware_detection;
    struct dirent *entry = nullptr;
    DIR *dp = nullptr;

    dp = opendir("/proc");
    if (dp != nullptr)
    {
        while ((entry = readdir(dp)))
        {
            try
            {
                process temp;
                temp.pid = stoi(entry->d_name);
                temp.children_count = 0;
                temp.parent = pgetppid(temp.pid);
                temp.process_time = get_process_time(temp.pid);
                malware_detection[temp.pid] = temp;
            }
            catch (std::invalid_argument)
            {
            }
        }
    }
    closedir(dp);
    for (auto it = malware_detection.begin(); it != malware_detection.end(); it++)
    {
        malware_detection[it->second.parent].children_count++;
        malware_detection[it->second.parent].children.push_back(it->second.pid);
    }
    for (auto it = malware_detection.begin(); it != malware_detection.end(); it++)
    {
        it->second.process_time_children = get_total_process_time(it->second.pid, malware_detection);
        it->second.total_children = get_total_child(it->second.pid, malware_detection);
    }
    return malware_detection;
}

void find_malware(int pid)
{
    map<int, process> malware_detection = create_process_info();
    vector<int> ancestors = get_parents(pid);
    for (int i = 0; i < ancestors.size(); i++)
    {
        if (malware_detection[ancestors[i]].total_children == 1)
            continue;
        double a, b;
        a = (malware_detection[ancestors[i]].process_time_children / (malware_detection[ancestors[i]].total_children - 1)) * 0.01;
        b = malware_detection[ancestors[i]].process_time;
        if (a > b)
        {
            cout << "Malware at pid ==> " << ancestors[i] << endl;
            break;
        }
    }
}

void detect(std::vector<std::string> args){
    pid_t pid = fork();

    if(pid < 0){
        perror("fork");
        return;
    }
    else if(pid==0){
        if(args.size() != 2 && args.size() != 3){
            cerr<<"Command not found"<<endl;
            exit(0);
        }
        print_parents(stoi(args[1]));
        if(args.size()==3 && args[2] == "-suggest"){
            find_malware(stoi(args[1]));
        }
        exit(0);
    }
    else{
        waitpid(pid, NULL, 0);
    }
}